// See README.md for license details.

package bilinear

import chisel3._

/**
  * This provides an alternate way to run tests, by executing then as a main
  * From sbt (Note: the test: prefix is because this main is under the test package hierarchy):
  * {{{
  * test:runMain bilinear.OffregMain
  * }}}
  * To see all command line options use:
  * {{{
  * test:runMain bilinear.OffregMain --help
  * }}}
  * To run with verilator:
  * {{{
  * test:runMain bilinear.OffregMain --backend-name verilator
  * }}}
  * To run with verilator from your terminal shell use:
  * {{{
  * sbt 'test:runMain bilinear.OffregMain --backend-name verilator'
  * }}}
  */
object OffregMain extends App {
  iotesters.Driver.execute(args, () => new PixelOffregFold) {
    c => new OffregUnitTester(c)
  }
}

object OffregToMemMain extends App {
  iotesters.Driver.execute(args, () => new OffregToMem) {
    c => new OffregToMemTester(c)
  }
}

/**
  * This provides a way to run the firrtl-interpreter REPL (or shell)
  * on the lowered firrtl generated by your circuit. You will be placed
  * in an interactive shell. This can be very helpful as a debugging
  * technique. Type help to see a list of commands.
  *
  * To run from sbt
  * {{{
  * test:runMain bilinear.OffregRepl
  * }}}
  * To run from sbt and see the half a zillion options try
  * {{{
  * test:runMain bilinear.OffregRepl --help
  * }}}
  */
object OffregRepl extends App {
  iotesters.Driver.executeFirrtlRepl(args, () => new PixelOffregFold)
}
